/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unimib.disco.lta.timedKTail.ui;

import edu.uci.ics.jung.algorithms.layout.ISOMLayout;
import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.SparseMultigraph;
import edu.uci.ics.jung.graph.util.EdgeType;
import edu.uci.ics.jung.visualization.GraphZoomScrollPane;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import edu.uci.ics.jung.visualization.renderers.Renderer;
import it.unimib.disco.lta.timedKTail.JTMTime.Node;
import it.unimib.disco.lta.timedKTail.JTMTime.TimedAutomata;
import it.unimib.disco.lta.timedKTail.JTMTime.Transition;
import it.unimib.disco.lta.timedKTail.algorithm.Policy;
import it.unimib.disco.lta.timedKTail.traces.InferenceMethod;
import it.unimib.disco.lta.timedKTail.traces.ObserverTimedAutomataTraceBuilder;
import it.unimib.disco.lta.timedKTail.traces.ObserverValidateTraceGUI;
import it.unimib.disco.lta.timedKTail.traces.Parser;
import it.unimib.disco.lta.timedKTail.validation.Validation;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import org.apache.commons.collections15.Transformer;
import org.apache.logging.log4j.LogManager;

/**
 *
 * @author AleX
 */
public class InterfacciaBase extends javax.swing.JFrame {

    /**
     * Creates new form InterfacciaBase
     */
    //cartella progetto principale
    public PathProject pathProject;
    public String separator;
    public File pathTecniche;
    public String tecnica;
    public String configurazione;
    public TimedAutomata ta;
    public JFrame frame;
    public String nameTecnica;
    public long nVer;
    public long nArch;
    public SparseMultigraph<Node, Transition> graph;
    ArrayList<String> listaTecniche;
    Policy poli;
    private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger(InterfacciaBase.class);
    
    public InterfacciaBase() {
        initComponents();
        pathProject = new PathProject();
        separator = System.getProperty("file.separator");               
        pathTecniche = new File("TecnicheInferenza");
        ta=null;
        listaTecniche=null;
        this.nameTecnica="";
        nVer=0;
        nArch=0;
        poli = null;
    }
    public PathProject getPathProject(){
        return pathProject;
    }
    public File getPathTecniche(){
        return pathTecniche;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrameSelectProject = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFrameMenu = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        jButtonCreateTA = new javax.swing.JButton();
        jButtonVisualizzaTA = new javax.swing.JButton();
        jButtonDeleteTA = new javax.swing.JButton();
        jButtonValidation = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabelProject = new javax.swing.JLabel();
        jLabelTrace = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabelTraceValidation = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabelTA = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jFrameCrezione = new javax.swing.JFrame();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListTecniche = new javax.swing.JList();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListConfigurazione = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaTecniche = new javax.swing.JTextArea();
        jButtonCreaTimedAutomata = new javax.swing.JButton();
        jFrameChoiseFolder = new javax.swing.JFrame();
        jFileChooserLoadProject = new javax.swing.JFileChooser();
        jFrameDetailsTA = new javax.swing.JFrame();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaInfoTA = new javax.swing.JTextArea();
        jFrameRIS = new javax.swing.JFrame();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaNAccettate = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextAreaAccettate = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        jFrameSelectProject.setMinimumSize(new java.awt.Dimension(530, 340));

        jFileChooser1.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        jFileChooser1.setApproveButtonText("Seleziona");
        jFileChooser1.setApproveButtonToolTipText("");
        jFileChooser1.setCurrentDirectory(null);
        jFileChooser1.setDialogTitle("");
        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrameSelectProjectLayout = new javax.swing.GroupLayout(jFrameSelectProject.getContentPane());
        jFrameSelectProject.getContentPane().setLayout(jFrameSelectProjectLayout);
        jFrameSelectProjectLayout.setHorizontalGroup(
            jFrameSelectProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jFrameSelectProjectLayout.setVerticalGroup(
            jFrameSelectProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jFrameMenu.setTitle("JTM - Timed Automata");
        jFrameMenu.setMinimumSize(new java.awt.Dimension(668, 596));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("JTM TIMED AUTOMATA ");
        jLabel3.setToolTipText("");

        jButtonCreateTA.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonCreateTA.setText("Crea Automa");
        jButtonCreateTA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonCreateTAMousePressed(evt);
            }
        });

        jButtonVisualizzaTA.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonVisualizzaTA.setText("Visualizza Automa");
        jButtonVisualizzaTA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonVisualizzaTAMousePressed(evt);
            }
        });

        jButtonDeleteTA.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonDeleteTA.setText("Elimina Automa");
        jButtonDeleteTA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonDeleteTAMousePressed(evt);
            }
        });
        jButtonDeleteTA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteTAActionPerformed(evt);
            }
        });

        jButtonValidation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonValidation.setText("Convalida Traccia");
        jButtonValidation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonValidationMousePressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Path Progetto");

        jLabelProject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelProject.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelProject.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabelTrace.setText("    ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Tracce Timed Automata");

        jLabelTraceValidation.setText("   ");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Tracce da Validare Timed Automata");

        jLabelTA.setText("    ");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Timed Automata");

        javax.swing.GroupLayout jFrameMenuLayout = new javax.swing.GroupLayout(jFrameMenu.getContentPane());
        jFrameMenu.getContentPane().setLayout(jFrameMenuLayout);
        jFrameMenuLayout.setHorizontalGroup(
            jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameMenuLayout.createSequentialGroup()
                        .addGap(0, 28, Short.MAX_VALUE)
                        .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameMenuLayout.createSequentialGroup()
                                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonCreateTA, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonVisualizzaTA, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonDeleteTA, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonValidation, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(142, 142, 142))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameMenuLayout.createSequentialGroup()
                                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jFrameMenuLayout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33))
                            .addGroup(jFrameMenuLayout.createSequentialGroup()
                                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelTraceValidation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelTrace, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addGroup(jFrameMenuLayout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(110, 110, 110)
                                        .addComponent(jLabelTA)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(156, 156, 156))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameMenuLayout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
        );
        jFrameMenuLayout.setVerticalGroup(
            jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(jLabelProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTrace, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTA, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTraceValidation, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCreateTA, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonVisualizzaTA, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDeleteTA, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonValidation, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        jFrameCrezione.setMinimumSize(new java.awt.Dimension(823, 542));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("JTM TIMED AUTOMATA ");
        jLabel7.setToolTipText("");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Tecniche Inferenza ");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jListTecniche.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTecniche.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListTecnicheMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jListTecniche);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Configurazioni ");
        jLabel12.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jListConfigurazione.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListConfigurazione.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jListConfigurazione.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListConfigurazioneMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jListConfigurazione);

        jTextAreaTecniche.setColumns(20);
        jTextAreaTecniche.setRows(5);
        jScrollPane4.setViewportView(jTextAreaTecniche);

        jButtonCreaTimedAutomata.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jButtonCreaTimedAutomata.setText("INFERISCI TIMED AUTOMATA");
        jButtonCreaTimedAutomata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonCreaTimedAutomataMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jFrameCrezioneLayout = new javax.swing.GroupLayout(jFrameCrezione.getContentPane());
        jFrameCrezione.getContentPane().setLayout(jFrameCrezioneLayout);
        jFrameCrezioneLayout.setHorizontalGroup(
            jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameCrezioneLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameCrezioneLayout.createSequentialGroup()
                        .addGroup(jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(52, 52, 52)
                        .addGroup(jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFrameCrezioneLayout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(jButtonCreaTimedAutomata, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameCrezioneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76))
        );
        jFrameCrezioneLayout.setVerticalGroup(
            jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameCrezioneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameCrezioneLayout.createSequentialGroup()
                        .addGroup(jFrameCrezioneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCreaTimedAutomata, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jFrameChoiseFolder.setMinimumSize(new java.awt.Dimension(590, 397));

        jFileChooserLoadProject.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooserLoadProject.setMinimumSize(new java.awt.Dimension(569, 397));
        jFileChooserLoadProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserLoadProjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrameChoiseFolderLayout = new javax.swing.GroupLayout(jFrameChoiseFolder.getContentPane());
        jFrameChoiseFolder.getContentPane().setLayout(jFrameChoiseFolderLayout);
        jFrameChoiseFolderLayout.setHorizontalGroup(
            jFrameChoiseFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooserLoadProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jFrameChoiseFolderLayout.setVerticalGroup(
            jFrameChoiseFolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooserLoadProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jFrameDetailsTA.setTitle("Visualizzazione Dettagli Timed Automata");
        jFrameDetailsTA.setMinimumSize(new java.awt.Dimension(556, 526));
        jFrameDetailsTA.setName(""); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("JTM TIMED AUTOMATA ");
        jLabel8.setToolTipText("");

        jTextAreaInfoTA.setEditable(false);
        jTextAreaInfoTA.setColumns(20);
        jTextAreaInfoTA.setRows(5);
        jScrollPane1.setViewportView(jTextAreaInfoTA);

        javax.swing.GroupLayout jFrameDetailsTALayout = new javax.swing.GroupLayout(jFrameDetailsTA.getContentPane());
        jFrameDetailsTA.getContentPane().setLayout(jFrameDetailsTALayout);
        jFrameDetailsTALayout.setHorizontalGroup(
            jFrameDetailsTALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameDetailsTALayout.createSequentialGroup()
                .addGroup(jFrameDetailsTALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameDetailsTALayout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jFrameDetailsTALayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jFrameDetailsTALayout.setVerticalGroup(
            jFrameDetailsTALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameDetailsTALayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );

        jFrameRIS.setMinimumSize(new java.awt.Dimension(724, 544));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("JTM TIMED AUTOMATA ");
        jLabel14.setToolTipText("");

        jTextAreaNAccettate.setColumns(20);
        jTextAreaNAccettate.setRows(5);
        jScrollPane5.setViewportView(jTextAreaNAccettate);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Tracce Non Accettate");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jTextAreaAccettate.setColumns(20);
        jTextAreaAccettate.setRows(5);
        jScrollPane6.setViewportView(jTextAreaAccettate);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Tracce Accettate");
        jLabel5.setToolTipText("");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jFrameRISLayout = new javax.swing.GroupLayout(jFrameRIS.getContentPane());
        jFrameRIS.getContentPane().setLayout(jFrameRISLayout);
        jFrameRISLayout.setHorizontalGroup(
            jFrameRISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameRISLayout.createSequentialGroup()
                .addGroup(jFrameRISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameRISLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 46, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameRISLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jFrameRISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jFrameRISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jFrameRISLayout.setVerticalGroup(
            jFrameRISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameRISLayout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jFrameRISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jFrameRISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JTM");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("JTM TIMED AUTOMATA ");
        jLabel1.setToolTipText("");

        jMenu2.setText("File");

        jMenuItem2.setText("Crea Progetto");
        jMenuItem2.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                jMenuItem2MenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Carica Progetto");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem3MousePressed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Chiudi");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem4MousePressed(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
        //recupero la cartella selezionata
        if(evt.getActionCommand().equals("CancelSelection")){
            jFrameSelectProject.setVisible(false);
        }else{
            pathProject.setFolderProject(jFileChooser1.getSelectedFile());
            if(pathProject.getFolderProject().isDirectory()){
                if (createProject()){
                    jFrameSelectProject.setVisible(false);
                    JOptionPane.showMessageDialog(null, "Cartelle progetto creata con successo","Creazione Progetto",JOptionPane.INFORMATION_MESSAGE);  
                    setVisibleCheckFramMenu();
                }else{
                    JOptionPane.showMessageDialog(null, "Impossibile creare la cartella progetto \n Selezionare un'altra cartella","Creazione Progetto",JOptionPane.ERROR_MESSAGE);
                }
            }else{
               JOptionPane.showMessageDialog(null, "L'elemento selezionato non è una cartella \n"
                       + "Selezionare una cartella valida","Creazione Progetto",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jFileChooser1ActionPerformed
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem2MenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_jMenuItem2MenuKeyPressed

    }//GEN-LAST:event_jMenuItem2MenuKeyPressed

    private void jMenuItem2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseClicked
    }//GEN-LAST:event_jMenuItem2MouseClicked

    private void jMenuItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MousePressed
        jFileChooser1.setCurrentDirectory(new File(System.getProperty("user.home")));
        jFrameSelectProject.setVisible(true);
    }//GEN-LAST:event_jMenuItem2MousePressed

    private void jButtonDeleteTAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteTAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDeleteTAActionPerformed

    private void jListTecnicheMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTecnicheMousePressed
        String tecnicaInferenza;
        tecnicaInferenza =(String)jListTecniche.getSelectedValue();
        File configurazioneTecnica = new File(pathTecniche+separator+tecnicaInferenza+separator+"conf");
        File[] filesConfigurazione;
        ArrayList<String> listaConfTecniche = new ArrayList();
        
        jListConfigurazione.removeAll();
        if(configurazioneTecnica.listFiles().length != 0){
            filesConfigurazione = configurazioneTecnica.listFiles();
            for(File f:filesConfigurazione){
                listaConfTecniche.add(f.getName());
            }
            jListConfigurazione.setListData(listaConfTecniche.toArray());
        }else{
            JOptionPane.showMessageDialog(null, "Impossibile Caricare Configurazione della Tecnica di Inferenza:\n"+tecnicaInferenza,"Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
        }
        
        
        
    }//GEN-LAST:event_jListTecnicheMousePressed

    private void jListConfigurazioneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListConfigurazioneMousePressed
        String confTecnica;
        String outputFile[];
        jTextAreaTecniche.setText("");
        confTecnica =(String) jListConfigurazione.getSelectedValue();
        File ConfiTenica = new File(pathTecniche+separator+jListTecniche.getSelectedValue().toString()+separator+"conf"+separator+confTecnica);
        outputFile=leggiFileConfigurazioneTecnica(ConfiTenica);
        jTextAreaTecniche.setText(outputFile[1]);
        setTecnica(confTecnica);
        setConfigurazione(outputFile[0]);
    }//GEN-LAST:event_jListConfigurazioneMousePressed

    public void setTecnica(String confTecnica){
        tecnica=confTecnica;
    }
    public void setConfigurazione(String val){
        configurazione=val;
    }
    public String getTecnica(){
        return this.nameTecnica;
    }
    public Policy getPolicy(){
        return poli;
    }
    private void jButtonCreaTimedAutomataMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCreaTimedAutomataMousePressed
        if(jListTecniche.getSelectedValue()!=null){
            if(jListConfigurazione.getSelectedValue()!=null){
                try {
                    Inferiscitracce(jListTecniche.getSelectedValue().toString());
                } catch (Exception ex) {
                    Logger.getLogger(InterfacciaBase.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(null, "Selezionare una tecnica di configurazione valida","Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
            }
        }else{
            JOptionPane.showMessageDialog(null, "Selezionare una tecnica di inferenza valida","Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_jButtonCreaTimedAutomataMousePressed

    private void jMenuItem3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MousePressed
        jFileChooserLoadProject.setCurrentDirectory(new File(System.getProperty("user.home")));
        jFrameChoiseFolder.setLocationRelativeTo(null);
        jFrameChoiseFolder.setVisible(true);
    }//GEN-LAST:event_jMenuItem3MousePressed

    private void jFileChooserLoadProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserLoadProjectActionPerformed
        boolean check[] = new boolean[4];
        if(evt.getActionCommand().equals("CancelSelection")){
            jFrameChoiseFolder.setVisible(false);
        }else{
            File pathLocation = jFileChooserLoadProject.getSelectedFile();
            if((pathLocation.exists()) && (pathLocation.isDirectory())){
                    check=CheckSetPath(pathLocation);
                }
                if( (check[0]) && (check[1]) && (check[2] && check[3])){
                    setPathForLoadProject(pathLocation);
                    jFrameChoiseFolder.setVisible(false);
                    JOptionPane.showMessageDialog(null, "Progetto caricato con successo","Caricamento Progetto",JOptionPane.INFORMATION_MESSAGE);  
                    setVisibleCheckFramMenu();
                }else{
                    JOptionPane.showMessageDialog(null, "Impossibile caricare il progetto\n"
                            +"La cartella:"+pathLocation.getPath()+"\nNon e' una cartella progetto JTM","Caricamento Progetto",JOptionPane.ERROR_MESSAGE);
                }
            }
    }//GEN-LAST:event_jFileChooserLoadProjectActionPerformed

    public boolean[] CheckSetPath(File pathLocation){
        boolean check[] = new boolean[4];
        File filesPathLocation[] = pathLocation.listFiles();
            for(File f:filesPathLocation){
                if((f.isDirectory()) && (f.getName().equals("result"))){
                    check[0]=true;
                }
                if((f.isDirectory()) && (f.getName().equals("timedAutomata"))){
                    check[1]=true;
                }
                if((f.isDirectory()) && (f.getName().equals("trace"))){
                    check[2]=true; 
                }
                if((f.isDirectory()) && (f.getName().equals("traceValidation"))){
                    check[3]=true;
                }
            }
        return check;
    }
    private void jButtonCreateTAMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCreateTAMousePressed
        if(jButtonCreateTA.isEnabled()){
            if(pathProject.checkFolderTrace()){
                if(pathProject.checkFolderTa() == false){
                    setVisibleFrameCreateAutomata();
                    jTextAreaTecniche.setText("");
                }else{
                    JOptionPane.showMessageDialog(null, "Impossibile creare il Timed Automata\n"
                       + "presente File all'interno della cartella:\n"
                       +pathProject.getFolderTA()+"\nLa cartella deve essere vuota","Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
                }  
            }else{
                JOptionPane.showMessageDialog(null, "Impossibile creare il Timed Automata\n"
                    + "Inserire i File di traccia nella cartella:\n"
                    +pathProject.getFolderTrace(),"Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
            }
        }    
    }//GEN-LAST:event_jButtonCreateTAMousePressed

    private void jButtonVisualizzaTAMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonVisualizzaTAMousePressed
        if(jButtonVisualizzaTA.isEnabled()){
            if(pathProject.checkFolderTa()){
                loadAutomata();
                drawGraph1("Timed Automata");
                setVisibleCheckTextAreaDetails();
            }else{
                JOptionPane.showMessageDialog(null, "Impossibile caricare il Timed Automata dal progetto corrente:\n"
                        +pathProject.getFolderProject()+"\nFile non presente!","Caricamento Timed Automata",JOptionPane.ERROR_MESSAGE); 
            }   
        }else{
            
        }
        
    }//GEN-LAST:event_jButtonVisualizzaTAMousePressed

    private void jButtonDeleteTAMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteTAMousePressed
        if(jButtonDeleteTA.isEnabled()){
            if(pathProject.getFolderProject().exists()){
                int choise = JOptionPane.showConfirmDialog(null, "Confermi eliminazione definitiva del progetto?","Eliminazione Timed Automata",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
                if(choise == JOptionPane.YES_OPTION){
                    deleteProject();
                    JOptionPane.showMessageDialog(null, "Progetto eliminato correttamente","Eliminazione Timed Automata",JOptionPane.INFORMATION_MESSAGE);
                    System.exit(1);
                }else{
                }
            }else{
                JOptionPane.showMessageDialog(null, "Impossibile eliminare il progetto corrente:\n"
                        +pathProject.getFolderProject()+"\nProgetto non presente!","Eliminazione Timed Automata",JOptionPane.ERROR_MESSAGE);
            }
            
            
        }else{
            
        }
        
    }//GEN-LAST:event_jButtonDeleteTAMousePressed

    public void deleteProject(){
        deleteALL(pathProject.getFolderResult());
        deleteALL(pathProject.getFolderTA());
        deleteALL(pathProject.getFolderTrace());
        deleteALL(pathProject.getFolderTraceValidation());
        deleteALL(pathProject.getFolderProject());
        System.out.println(pathProject.getFolderProject().delete());

    }
    private void jButtonValidationMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValidationMousePressed
        if(jButtonValidation.isEnabled()){
            if(pathProject.getFolderTraceValidation().exists()){
                if(pathProject.getFolderTraceValidation().listFiles().length == 0){
                    JOptionPane.showMessageDialog(null, "Impossibile effettuare la valutazione delle tracce\n"
                            + "Cartella tracce da validare è vuota\n"+pathProject.getFolderTraceValidation(),"Validazione Timed Automata",JOptionPane.ERROR_MESSAGE);
                }else{
                    validation();
                    checkVisualeRisultati();
                }
            }else{
                JOptionPane.showMessageDialog(null, "Impossibile effettuare la valutazione delle tracce\n"
                            + "Cartella tracce da validare non esiste!","Validazione Timed Automata",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonValidationMousePressed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MousePressed
    System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4MousePressed

    private void checkVisualeRisultati(){
        jTextAreaAccettate.setText("");
        jTextAreaNAccettate.setText("");
        addResult();
        jFrameRIS.setVisible(true);
        jFrameRIS.setLocationRelativeTo(null);
    }
    private void addResult(){
        String riga;
        File pathPositivi = new File(pathProject.getFolderResult()+separator+"positivi.dat");
        File pathNegativi = new File(pathProject.getFolderResult()+separator+"negativi.dat");
        FileReader frP;
        FileReader frN;
        try {
            frP = new FileReader(pathPositivi);
            BufferedReader brP = new BufferedReader(frP);

            while( (riga =brP.readLine()) != null){
                jTextAreaAccettate.append(riga+"\n");
            }
            frP.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfacciaBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfacciaBase.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            frN = new FileReader(pathNegativi);
            BufferedReader brN = new BufferedReader(frN);

            while( (riga =brN.readLine()) != null){
                jTextAreaNAccettate.append(riga+"\n");
            }
            frN.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InterfacciaBase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InterfacciaBase.class.getName()).log(Level.SEVERE, null, ex);
        }


    }
    
    private void validation(){    
        if(pathProject.getFolderResult().exists()){
            loadAutomata();
            Validation validation = new Validation(ta);
            ObserverValidateTraceGUI oValidateGUI = new ObserverValidateTraceGUI(2,validation,pathProject.getFolderResult());
            Parser parser2 = new Parser(oValidateGUI);
            parser2.readFolder(pathProject.getFolderTraceValidation().getPath());
        }else{
            JOptionPane.showMessageDialog(null, "Impossibile effettuare la valutazione delle tracce\n"
                            + "Cartella risultati validazione non esiste!","Validazione Timed Automata",JOptionPane.ERROR_MESSAGE);
        }
 
    }
        
    public void deleteALL(File f){
        if(f.isFile()){
            f.delete();
        }
        if(f.isDirectory()){
            if(f.listFiles().length == 0){
                f.delete();
            }else{
                for(File f1:f.listFiles()){
                    deleteALL(f1);
                }
            }
        }
      
    }
    public void setPathForLoadProject(File PathProject){
        pathProject.setFolderProject(PathProject);
        pathProject.setFolderResult(PathProject+separator+"result");
        pathProject.setFolderTA(PathProject+separator+"timedAutomata");
        pathProject.setFolderTrace(PathProject+separator+"trace");
        pathProject.setFolderTraceValidation(PathProject+separator+"traceValidation"); 
    }
    public String getConfigurazione(){
        return this.configurazione;
    }
    public void Inferiscitracce(String cTecnica) throws Exception{
        TimedAutomata ta;
        String policy[];
        String policyTOT=this.configurazione;
        policy = policyTOT.split(";");
        
        Parser parser = null;
        this.nameTecnica=cTecnica;
        InferenceMethod method;
        ObserverTimedAutomataTraceBuilder o;
        if(policy.length == 4){
            poli = new Policy(Integer.valueOf(policy[1]),Double.valueOf(policy[2]),Integer.valueOf(policy[3]),false, false);
        }
        if(policy.length == 3){
//            poli = new Policy(Integer.valueOf(policy[1]),-1,Integer.valueOf(policy[2]));
            poli = new Policy(Integer.valueOf(policy[1]),0d,Integer.valueOf(policy[2]),false,false);
        }

        
        if(poli != null){
            method = (InferenceMethod)newInstance(cTecnica,Integer.valueOf(policy[0]),poli); 
            o = new ObserverTimedAutomataTraceBuilder(1,method);
            parser = new Parser(o);
            parser.readFolder(String.valueOf(pathProject.getFolderTrace()));
            method.resolve();
            ta=method.getTimedAutomata();
            saveAutomata(ta);
            jFrameCrezione.setVisible(false);
            setVisibleCheckFramMenu();
        }else{
            JOptionPane.showMessageDialog(null, "Errore configurazione politiche","Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
        }
        if(pathProject.checkFolderTrace()){
            parser.readFolder(pathProject.getFolderTrace().getPath());
        }else{
            JOptionPane.showMessageDialog(null, "Inserire le tracce nella cartella:\n"
                    +pathProject.getFolderTrace(),"Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
        }
    }
    
 public Object newInstance(String className, Object...parametri) throws Exception {
    	Class<?> ClasseTecnica = Class.forName(className);
        System.out.println(ClasseTecnica.getCanonicalName());
    	if(parametri == null || parametri.length == 0) {
    		return ClasseTecnica.newInstance();
    	}
    	List<Class<?>> paramLunghezza = new ArrayList<Class<?>>();
    	for(Object object : parametri) {
    		paramLunghezza.add(object.getClass());
    	}
    	Constructor<?> CostruttoreTecnica = ClasseTecnica.getConstructor(paramLunghezza.toArray(new Class[paramLunghezza.size()]));
    	return CostruttoreTecnica.newInstance(parametri);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfacciaBase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfacciaBase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfacciaBase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfacciaBase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                InterfacciaBase n = new InterfacciaBase();  
                n.setLocationRelativeTo(null);
                n.setVisible(true);
//                n.setLocation(350, 350);
                n.jFrameSelectProject.setLocationRelativeTo(null);
            }
        });
    }
    
    
        public boolean createProject(){
        pathProject.setFolderTA(pathProject.getFolderProject()+separator+"timedAutomata");
        pathProject.setFolderTrace(pathProject.getFolderProject()+separator+"trace");
        pathProject.setFolderTraceValidation(pathProject.getFolderProject()+separator+"traceValidation");
        pathProject.setFolderResult(pathProject.getFolderProject()+separator+"result");
        if (pathProject.getFolderTA().mkdir()){
            if(pathProject.getFolderTrace().mkdir()){
                if(pathProject.getFolderTraceValidation().mkdir()){
                    if(pathProject.getFolderResult().mkdir()){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    public void setVisibleCheckFramMenu(){
        jLabelProject.setText(pathProject.getFolderProject().getAbsolutePath());
        
        if (pathProject.checkFolderTrace()){
            jLabelTrace.setIcon(new ImageIcon("img"+separator+"green.gif"));
        }else{
            jLabelTrace.setIcon(new ImageIcon("img"+separator+"red.gif"));
        }
        if (pathProject.checkFolderTa()){
            jLabelTA.setIcon(new ImageIcon("img"+separator+"green.gif"));
        }else{
            jLabelTA.setIcon(new ImageIcon("img"+separator+"red.gif"));
        }
        if (pathProject.checkFolderValidation()){
            jLabelTraceValidation.setIcon(new ImageIcon("img"+separator+"green.gif"));
        }else{
            jLabelTraceValidation.setIcon(new ImageIcon("img"+separator+"red.gif"));
        }
        
        if(pathProject.getFolderProject().exists()){
            jButtonCreateTA.setEnabled(false);
            jButtonVisualizzaTA.setEnabled(false);
            jButtonDeleteTA.setEnabled(true);
            jButtonValidation.setEnabled(false);
        }
        
        if(pathProject.checkFolderTa()){
            jButtonCreateTA.setEnabled(false);
            jButtonVisualizzaTA.setEnabled(true);
            jButtonDeleteTA.setEnabled(true);
            jButtonValidation.setEnabled(true);
        }else{
            jButtonCreateTA.setEnabled(true);
            jButtonVisualizzaTA.setEnabled(false);
            jButtonDeleteTA.setEnabled(true);
            jButtonValidation.setEnabled(false);
        }
        jFrameMenu.setLocationRelativeTo(null);
        jFrameMenu.setVisible(true);
    }
    public ArrayList<String> getListaTeniche(){
        return listaTecniche;
    }
    public void setVisibleFrameCreateAutomata(){
        File[] filesTecniche;
        listaTecniche = new ArrayList();
        
        jListTecniche.removeAll();
        jListConfigurazione.removeAll();
        if(pathTecniche.listFiles().length != 0){
            filesTecniche = pathTecniche.listFiles();
            for(File f:filesTecniche){
                listaTecniche.add(f.getName());
            }
            jListTecniche.setListData(listaTecniche.toArray());
            jFrameCrezione.setVisible(true);
            jFrameCrezione.setLocationRelativeTo(null);
        }else{
            jFrameCrezione.setVisible(false);
            JOptionPane.showMessageDialog(null, "Impossibile Caricare Tecniche di Inferenza","Creazione Timed Automata",JOptionPane.ERROR_MESSAGE); 
        }
    }
    
    public String[] leggiFileConfigurazioneTecnica(File fPath){        
        String ritorno[]= new String[2];
        String riga;
        try {
            FileReader f = new FileReader(fPath);
            BufferedReader b=new BufferedReader(f);
            ritorno[0]=b.readLine();
            ritorno[1]="";
            while( (riga =b.readLine()) != null){
                ritorno[1]+=riga+"\n";
            }
            b.close();
            f.close();
            return ritorno;
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Impossibile leggere file di configurazione:\n"+fPath.getPath(),"Lettura File Configurazione Tecnica Inferenza",JOptionPane.ERROR_MESSAGE); 
        }catch (IOException  ex) {
            JOptionPane.showMessageDialog(null, "File di configurazione tecnica di inferenza mal formattato!:\n"+fPath.getPath(),"Lettura File Configurazione Tecnica Inferenza",JOptionPane.ERROR_MESSAGE); 
        }
        return null;
    }
    
    public  boolean saveAutomata(TimedAutomata ta){
        try
        {
            FileOutputStream fileOut =
            new FileOutputStream(pathProject.getFolderTA()+separator+"timedAutomata.jtm",true);
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(ta);
            out.flush();
            out.close();
            fileOut.close();
//            JOptionPane.showMessageDialog(null, "Inferenza e salvataggio del Timed Autoamta avvennuta con successo","Salvataggio Timed Automata",JOptionPane.INFORMATION_MESSAGE); 
            jFrameCrezione.setVisible(false);
            setVisibleCheckFramMenu();
            return true;
        }catch(IOException i){
          JOptionPane.showMessageDialog(null, "Impossibile il salvataggio del TimedAutomata su disco\n Errore di Scrittura!!\n"
                  + "Verificare di possedere i dirittid i scrittura","Salvataggio Timed Automata",JOptionPane.ERROR_MESSAGE); 
          return false;
      }
    }
    
    public void loadAutomata(){
            try
            {
                FileInputStream fileIn = new FileInputStream(pathProject.getFolderTA()+separator+"timedAutomata.jtm");
                ObjectInputStream in = new ObjectInputStream(fileIn);
                ta = (TimedAutomata) in.readObject();
                in.close();
                fileIn.close();
            }catch(IOException i){
                JOptionPane.showMessageDialog(null, "Impossibile caricare il Timed Automata dal progetto corrente:\n"
                        +pathProject.getFolderProject(),"Caricamento Timed Automata",JOptionPane.ERROR_MESSAGE); 
            }catch(ClassNotFoundException c){
                JOptionPane.showMessageDialog(null, "Impossibile caricare il Timed Automata dal progetto corrente:\n"
                        +pathProject.getFolderProject()+"\nFile Corrotti","Caricamento Timed Automata",JOptionPane.ERROR_MESSAGE); 
                c.printStackTrace();
            }
    }
    
    public void drawGraph1(String name){
       
        
        Collection<Node> n = ta.getNodes();
        Collection<Transition> t = ta.getTransitions();
        graph = new SparseMultigraph();
        for(it.unimib.disco.lta.timedKTail.JTMTime.Node nodo:n){
            graph.addVertex(nodo);
            nVer++;
        }

        for(it.unimib.disco.lta.timedKTail.JTMTime.Transition t1:t){
            graph.addEdge(t1,t1.getNodeFrom(), t1.getNodeTo(), EdgeType.DIRECTED);
            nArch++;
        }
        if(n.size()==1){
            JOptionPane.showMessageDialog(null, "Impossibile visualizzare il timed automata\n"
                    + "Il timed automata non possiede 0 stati e 0 transizioni","Caricamento Timed Automata",JOptionPane.INFORMATION_MESSAGE);
        }else{
            drawGraph(graph,name); 
        }
    }
    public Object getGUIGraph(){
        return graph;
    }
    public long getNVertex(){
        return nVer;
    }
    public long getNEdge(){
        return nArch;
    }
    public TimedAutomata getTimedAutomata(){
        return ta;
    }
    private void drawGraph(SparseMultigraph<Node, Transition> g,String name){
         // The Layout<V, E> is parameterized by the vertex and edge types
         Layout<Node, Transition> layout = new ISOMLayout(g);
         layout.setSize(new Dimension(300,300)); // sets the initial size of the space
         // The BasicVisualizationServer<V,E> is parameterized by the edge types
         VisualizationViewer<Node,Transition> vv =
         new VisualizationViewer<Node, Transition>(layout);
         vv.setPreferredSize(new Dimension(500,500)); //Sets the viewing area size
         
         //modifico colore dei nodi
         Transformer<Node,Paint> vertexPaint = new Transformer<Node,Paint>() {
            public Paint transform(Node n) {
                if(n.getId()==0){
                    return Color.RED;
                }
                return Color.GREEN;
            }
            };
         //modifico colore degli archi
         Transformer<Transition,Paint> EdgePaint = new Transformer<Transition,Paint>() {
            public Paint transform(Transition t) {
                return Color.YELLOW;
            }
            };
         
            Transformer<Node,Shape> vertexSize = new Transformer<Node,Shape>(){
            public Shape transform(Node i){
                Ellipse2D circle = new Ellipse2D.Double(-15, -15, 30, 30);
                // in this case, the vertex is twice as large
                if(i.getId() == 0) return AffineTransform.getScaleInstance(1.2, 1.2).createTransformedShape(circle);
                else return circle;
            }
        };
         
         //Modifico Testo dei nodi
         vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller() {
        @Override
        public String transform(Object v) {
            Node n=(Node)v;
            return super.transform(n.getId());
        }});
         
         final Stroke edgeStroke = new BasicStroke(3.0f);
         Transformer<Transition, Stroke> edgeStrokeTransformer =
         new Transformer<Transition, Stroke>() {
         @Override
         public Stroke transform(Transition s) {
         return edgeStroke;
         }
         };
    
         vv.getRenderContext().setVertexShapeTransformer(vertexSize);
         vv.getRenderContext().setEdgeStrokeTransformer(edgeStrokeTransformer);
         vv.getRenderContext().setVertexFillPaintTransformer(vertexPaint);
         vv.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller());
//         vv.getRenderContext().setEdgeFillPaintTransformer(EdgePaint);
         vv.getRenderContext().setEdgeDrawPaintTransformer(EdgePaint);
         vv.getRenderer().getVertexLabelRenderer().setPosition(Renderer.VertexLabel.Position.CNTR);
         
         //permette di utilizzare il mouse su interfaccia grafica
        DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
        gm.setMode(ModalGraphMouse.Mode.TRANSFORMING);
        vv.setGraphMouse(gm);
         //permette di utilizzare il mouse su interfaccia grafica
        DefaultModalGraphMouse graphMouse = new DefaultModalGraphMouse();
        graphMouse.setMode(ModalGraphMouse.Mode.PICKING);
        vv.setGraphMouse(graphMouse);
        
        GUIEdgeListener GUIELister = new GUIEdgeListener(jTextAreaInfoTA);
        vv.getPickedEdgeState().addItemListener(GUIELister);

        vv.addGraphMouseListener(new GUINodeListener(jTextAreaInfoTA));
        GraphZoomScrollPane scrollPane = new GraphZoomScrollPane(vv);

        setVisibleCheckTextAreaDetails();
        
        this.frame = new JFrame(name);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        frame.getContentPane().add(scrollPane);
        frame.pack();
        frame.setVisible(true); 
        frame.setLocation(350, 350);

    }
    public void setVisibleCheckTextAreaDetails(){
        jFrameDetailsTA.setVisible(true);
        jFrameDetailsTA.setLocationRelativeTo(null);
        jTextAreaInfoTA.setText("");  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreaTimedAutomata;
    private javax.swing.JButton jButtonCreateTA;
    private javax.swing.JButton jButtonDeleteTA;
    private javax.swing.JButton jButtonValidation;
    private javax.swing.JButton jButtonVisualizzaTA;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooserLoadProject;
    private javax.swing.JFrame jFrameChoiseFolder;
    private javax.swing.JFrame jFrameCrezione;
    private javax.swing.JFrame jFrameDetailsTA;
    private javax.swing.JFrame jFrameMenu;
    private javax.swing.JFrame jFrameRIS;
    private javax.swing.JFrame jFrameSelectProject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelProject;
    private javax.swing.JLabel jLabelTA;
    private javax.swing.JLabel jLabelTrace;
    private javax.swing.JLabel jLabelTraceValidation;
    private javax.swing.JList jListConfigurazione;
    private javax.swing.JList jListTecniche;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextAreaAccettate;
    private javax.swing.JTextArea jTextAreaInfoTA;
    private javax.swing.JTextArea jTextAreaNAccettate;
    private javax.swing.JTextArea jTextAreaTecniche;
    // End of variables declaration//GEN-END:variables
}
